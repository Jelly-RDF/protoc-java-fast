package eu.neverblink.protoc.java.runtime;

import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// Code generated by the Protocol Buffer compiler is owned by the owner
// of the input file used when generating it.  This code is not
// standalone and requires a support library to be linked with it.  This
// support library is itself covered by the above license.

/**
 * An InputStream implementations which reads from some other InputStream but is limited to a
 * particular number of bytes. Used by mergeDelimitedFrom(). This is intentionally
 * package-private so that UnknownFieldSet can share it.
 * <p>
 * Source:
 * https://github.com/protocolbuffers/protobuf/blob/f63ed55d4b85ad3cd558057e178c035e70c02c77/java/core/src/main/java/com/google/protobuf/AbstractMessageLite.java#L251
 *
 * @author kenton@google.com Kenton Varda
 */
final class LimitedInputStream extends FilterInputStream {
    private int limit;

    LimitedInputStream(InputStream in, int limit) {
        super(in);
        this.limit = limit;
    }

    @Override
    public int available() throws IOException {
        return Math.min(super.available(), limit);
    }

    @Override
    public int read() throws IOException {
        if (limit <= 0) {
            return -1;
        }
        final int result = super.read();
        if (result >= 0) {
            --limit;
        }
        return result;
    }

    @Override
    public int read(final byte[] b, final int off, int len) throws IOException {
        if (limit <= 0) {
            return -1;
        }
        len = Math.min(len, limit);
        final int result = super.read(b, off, len);
        if (result >= 0) {
            limit -= result;
        }
        return result;
    }

    @Override
    public long skip(final long n) throws IOException {
        // because we take the minimum of an int and a long, result is guaranteed to be
        // less than or equal to Integer.MAX_INT so this cast is safe
        int result = (int) super.skip(Math.min(n, limit));
        if (result >= 0) {
            // if the superclass adheres to the contract for skip, this condition is always true
            limit -= result;
        }
        return result;
    }
}
