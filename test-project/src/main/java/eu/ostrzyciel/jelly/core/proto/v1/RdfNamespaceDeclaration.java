// Code generated by protocol buffer compiler. Do not edit!
package eu.ostrzyciel.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;
import java.io.IOException;

/**
 * Protobuf type {@code RdfNamespaceDeclaration}
 */
@SuppressWarnings("hiding")
public final class RdfNamespaceDeclaration extends ProtoMessage<RdfNamespaceDeclaration> implements Cloneable {
  private static final long serialVersionUID = 0L;

  /**
   * <code>optional string name = 1;</code>
   */
  private String name = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri value = 2;</code>
   */
  private RdfIri value_ = null;

  private RdfNamespaceDeclaration() {
  }

  /**
   * @return a new empty instance of {@code RdfNamespaceDeclaration}
   */
  public static RdfNamespaceDeclaration newInstance() {
    return new RdfNamespaceDeclaration();
  }

  private void initName() {
    if (name == null) {
      name = "";
    }
  }

  /**
   * <code>optional string name = 1;</code>
   * @return whether the name field is set
   */
  public boolean hasName() {
    return (bitField0_ & 0x00000001) != 0;
  }

  /**
   * <code>optional string name = 1;</code>
   * @return this
   */
  public RdfNamespaceDeclaration clearName() {
    bitField0_ &= ~0x00000001;
    if (name != null) {
      name = "";
    }
    return this;
  }

  /**
   * <code>optional string name = 1;</code>
   * @return the name
   */
  public String getName() {
    initName();
    return name;
  }

  /**
   * <code>optional string name = 1;</code>
   * @param value the name to set
   * @return this
   */
  public RdfNamespaceDeclaration setName(final String value) {
    initName();
    bitField0_ |= 0x00000001;
    name = value;
    return this;
  }

  private void initValue() {
    if (value_ == null) {
      value_ = RdfIri.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri value = 2;</code>
   * @return whether the value_ field is set
   */
  public boolean hasValue() {
    return (bitField0_ & 0x00000002) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri value = 2;</code>
   * @return this
   */
  public RdfNamespaceDeclaration clearValue() {
    bitField0_ &= ~0x00000002;
    if (value_ != null) {
      value_.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri value = 2;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableValue()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfIri getValue() {
    initValue();
    return value_;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri value = 2;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfIri getMutableValue() {
    initValue();
    bitField0_ |= 0x00000002;
    return value_;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri value = 2;</code>
   * @param value the value_ to set
   * @return this
   */
  public RdfNamespaceDeclaration setValue(final RdfIri value) {
    initValue();
    bitField0_ |= 0x00000002;
    value_.copyFrom(value);
    return this;
  }

  @Override
  public RdfNamespaceDeclaration copyFrom(final RdfNamespaceDeclaration other) {
    cachedSize = other.cachedSize;
    if ((bitField0_ | other.bitField0_) != 0) {
      bitField0_ = other.bitField0_;
      if (other.hasName()) {
        initName();
        name = other.name;
      } else {
        clearName();
      }
      if (other.hasValue()) {
        initValue();
        value_.copyFrom(other.value_);
      } else {
        clearValue();
      }
    }
    return this;
  }

  @Override
  public RdfNamespaceDeclaration mergeFrom(final RdfNamespaceDeclaration other) {
    if (other.isEmpty()) {
      return this;
    }
    cachedSize = -1;
    if (other.hasName()) {
      name = other.name;
    }
    if (other.hasValue()) {
      getMutableValue().mergeFrom(other.value_);
    }
    return this;
  }

  @Override
  public RdfNamespaceDeclaration clear() {
    if (isEmpty()) {
      return this;
    }
    cachedSize = -1;
    bitField0_ = 0;
    if (name != null) {
      name = "";
    }
    if (value_ != null) {
      value_.clear();
    }
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfNamespaceDeclaration)) {
      return false;
    }
    RdfNamespaceDeclaration other = (RdfNamespaceDeclaration) o;
    return bitField0_ == other.bitField0_
      && (!hasName() || name.equals(other.name))
      && (!hasValue() || value_.equals(other.value_));
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
    if ((bitField0_ & 0x00000001) != 0) {
      output.writeRawByte((byte) 10);
      output.writeStringNoTag(name);
    }
    if ((bitField0_ & 0x00000002) != 0) {
      output.writeRawByte((byte) 18);
      output.writeUInt32NoTag(value_.getCachedSize());
      value_.writeTo(output);
    }
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    if ((bitField0_ & 0x00000001) != 0) {
      size += 1 + CodedOutputStream.computeStringSizeNoTag(name);
    }
    if ((bitField0_ & 0x00000002) != 0) {
      final int dataSize = value_.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    return size;
  }

  @Override
  @SuppressWarnings("fallthrough")
  public RdfNamespaceDeclaration mergeFrom(final CodedInputStream input) throws IOException {
    // Enabled Fall-Through Optimization (Quickbuf)
    int tag = input.readTag();
    while (true) {
      switch (tag) {
        case 10: {
          // name
          initName();
          name = input.readStringRequireUtf8();
          bitField0_ |= 0x00000001;
          tag = input.readTag();
          if (tag != 18) {
            break;
          }
        }
        case 18: {
          // value_
          initValue();
          ProtoMessage.mergeDelimitedFrom(value_, input);
          bitField0_ |= 0x00000002;
          tag = input.readTag();
          if (tag != 0) {
            break;
          }
        }
        case 0: {
          return this;
        }
        default: {
          if (!input.skipField(tag)) {
            return this;
          }
          tag = input.readTag();
          break;
        }
      }
    }
  }

  @Override
  public RdfNamespaceDeclaration clone() {
    return new RdfNamespaceDeclaration().copyFrom(this);
  }

  @Override
  public boolean isEmpty() {
    return ((bitField0_) == 0);
  }

  public static RdfNamespaceDeclaration parseFrom(final byte[] data) throws
      InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(new RdfNamespaceDeclaration(), data).checkInitialized();
  }

  public static RdfNamespaceDeclaration parseFrom(final CodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(new RdfNamespaceDeclaration(), input).checkInitialized();
  }

  /**
   * @return factory for creating RdfNamespaceDeclaration messages
   */
  public static MessageFactory<RdfNamespaceDeclaration> getFactory() {
    return RdfNamespaceDeclarationFactory.INSTANCE;
  }

  private enum RdfNamespaceDeclarationFactory implements MessageFactory<RdfNamespaceDeclaration> {
    INSTANCE;

    @Override
    public RdfNamespaceDeclaration create() {
      return RdfNamespaceDeclaration.newInstance();
    }
  }
}
