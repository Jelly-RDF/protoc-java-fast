// Code generated by protocol buffer compiler. Do not edit!
package eu.ostrzyciel.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;
import java.io.IOException;

/**
 * Protobuf type {@code RdfQuad}
 */
@SuppressWarnings("hiding")
public final class RdfQuad extends ProtoMessage<RdfQuad> implements Cloneable {
  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri s_iri = 1;</code>
   */
  private RdfIri sIri = null;

  /**
   * <code>optional string s_bnode = 2;</code>
   */
  private String sBnode = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral s_literal = 3;</code>
   */
  private RdfLiteral sLiteral = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple s_triple_term = 4;</code>
   */
  private RdfTriple sTripleTerm = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri p_iri = 5;</code>
   */
  private RdfIri pIri = null;

  /**
   * <code>optional string p_bnode = 6;</code>
   */
  private String pBnode = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral p_literal = 7;</code>
   */
  private RdfLiteral pLiteral = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple p_triple_term = 8;</code>
   */
  private RdfTriple pTripleTerm = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri o_iri = 9;</code>
   */
  private RdfIri oIri = null;

  /**
   * <code>optional string o_bnode = 10;</code>
   */
  private String oBnode = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral o_literal = 11;</code>
   */
  private RdfLiteral oLiteral = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple o_triple_term = 12;</code>
   */
  private RdfTriple oTripleTerm = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri g_iri = 13;</code>
   */
  private RdfIri gIri = null;

  /**
   * <code>optional string g_bnode = 14;</code>
   */
  private String gBnode = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfDefaultGraph g_default_graph = 15;</code>
   */
  private RdfDefaultGraph gDefaultGraph = null;

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral g_literal = 16;</code>
   */
  private RdfLiteral gLiteral = null;

  private RdfQuad() {
  }

  /**
   * @return a new empty instance of {@code RdfQuad}
   */
  public static RdfQuad newInstance() {
    return new RdfQuad();
  }

  public boolean hasSubject() {
    return (((bitField0_ & 0x0000f000)) != 0);
  }

  public RdfQuad clearSubject() {
    if (hasSubject()) {
      clearSIri();
      clearSBnode();
      clearSLiteral();
      clearSTripleTerm();
    }
    return this;
  }

  private void clearSubjectOtherSIri() {
    if ((((bitField0_ & 0x0000e000)) != 0)) {
      clearSBnode();
      clearSLiteral();
      clearSTripleTerm();
    }
  }

  private void clearSubjectOtherSBnode() {
    if ((((bitField0_ & 0x0000d000)) != 0)) {
      clearSIri();
      clearSLiteral();
      clearSTripleTerm();
    }
  }

  private void clearSubjectOtherSLiteral() {
    if ((((bitField0_ & 0x0000b000)) != 0)) {
      clearSIri();
      clearSBnode();
      clearSTripleTerm();
    }
  }

  private void clearSubjectOtherSTripleTerm() {
    if ((((bitField0_ & 0x00007000)) != 0)) {
      clearSIri();
      clearSBnode();
      clearSLiteral();
    }
  }

  public boolean hasPredicate() {
    return (((bitField0_ & 0x00000f00)) != 0);
  }

  public RdfQuad clearPredicate() {
    if (hasPredicate()) {
      clearPIri();
      clearPBnode();
      clearPLiteral();
      clearPTripleTerm();
    }
    return this;
  }

  private void clearPredicateOtherPIri() {
    if ((((bitField0_ & 0x00000e00)) != 0)) {
      clearPBnode();
      clearPLiteral();
      clearPTripleTerm();
    }
  }

  private void clearPredicateOtherPBnode() {
    if ((((bitField0_ & 0x00000d00)) != 0)) {
      clearPIri();
      clearPLiteral();
      clearPTripleTerm();
    }
  }

  private void clearPredicateOtherPLiteral() {
    if ((((bitField0_ & 0x00000b00)) != 0)) {
      clearPIri();
      clearPBnode();
      clearPTripleTerm();
    }
  }

  private void clearPredicateOtherPTripleTerm() {
    if ((((bitField0_ & 0x00000700)) != 0)) {
      clearPIri();
      clearPBnode();
      clearPLiteral();
    }
  }

  public boolean hasObject() {
    return (((bitField0_ & 0x000000f0)) != 0);
  }

  public RdfQuad clearObject() {
    if (hasObject()) {
      clearOIri();
      clearOBnode();
      clearOLiteral();
      clearOTripleTerm();
    }
    return this;
  }

  private void clearObjectOtherOIri() {
    if ((((bitField0_ & 0x000000e0)) != 0)) {
      clearOBnode();
      clearOLiteral();
      clearOTripleTerm();
    }
  }

  private void clearObjectOtherOBnode() {
    if ((((bitField0_ & 0x000000d0)) != 0)) {
      clearOIri();
      clearOLiteral();
      clearOTripleTerm();
    }
  }

  private void clearObjectOtherOLiteral() {
    if ((((bitField0_ & 0x000000b0)) != 0)) {
      clearOIri();
      clearOBnode();
      clearOTripleTerm();
    }
  }

  private void clearObjectOtherOTripleTerm() {
    if ((((bitField0_ & 0x00000070)) != 0)) {
      clearOIri();
      clearOBnode();
      clearOLiteral();
    }
  }

  public boolean hasGraph() {
    return (((bitField0_ & 0x0000000f)) != 0);
  }

  public RdfQuad clearGraph() {
    if (hasGraph()) {
      clearGIri();
      clearGBnode();
      clearGDefaultGraph();
      clearGLiteral();
    }
    return this;
  }

  private void clearGraphOtherGIri() {
    if ((((bitField0_ & 0x0000000e)) != 0)) {
      clearGBnode();
      clearGDefaultGraph();
      clearGLiteral();
    }
  }

  private void clearGraphOtherGBnode() {
    if ((((bitField0_ & 0x0000000d)) != 0)) {
      clearGIri();
      clearGDefaultGraph();
      clearGLiteral();
    }
  }

  private void clearGraphOtherGDefaultGraph() {
    if ((((bitField0_ & 0x0000000b)) != 0)) {
      clearGIri();
      clearGBnode();
      clearGLiteral();
    }
  }

  private void clearGraphOtherGLiteral() {
    if ((((bitField0_ & 0x00000007)) != 0)) {
      clearGIri();
      clearGBnode();
      clearGDefaultGraph();
    }
  }

  private void initSIri() {
    if (sIri == null) {
      sIri = RdfIri.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri s_iri = 1;</code>
   * @return whether the sIri field is set
   */
  public boolean hasSIri() {
    return (bitField0_ & 0x00001000) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri s_iri = 1;</code>
   * @return this
   */
  public RdfQuad clearSIri() {
    bitField0_ &= ~0x00001000;
    if (sIri != null) {
      sIri.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri s_iri = 1;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableSIri()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfIri getSIri() {
    initSIri();
    return sIri;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri s_iri = 1;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfIri getMutableSIri() {
    clearSubjectOtherSIri();
    initSIri();
    bitField0_ |= 0x00001000;
    return sIri;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri s_iri = 1;</code>
   * @param value the sIri to set
   * @return this
   */
  public RdfQuad setSIri(final RdfIri value) {
    clearSubjectOtherSIri();
    initSIri();
    bitField0_ |= 0x00001000;
    sIri.copyFrom(value);
    return this;
  }

  private void initSBnode() {
    if (sBnode == null) {
      sBnode = "";
    }
  }

  /**
   * <code>optional string s_bnode = 2;</code>
   * @return this
   */
  public RdfQuad clearSBnode() {
    if (sBnode != null) {
      sBnode = "";
    }
    return this;
  }

  /**
   * <code>optional string s_bnode = 2;</code>
   * @return the sBnode
   */
  public String getSBnode() {
    initSBnode();
    return sBnode;
  }

  /**
   * <code>optional string s_bnode = 2;</code>
   * @param value the sBnode to set
   * @return this
   */
  public RdfQuad setSBnode(final String value) {
    clearSubjectOtherSBnode();
    sBnode = value;
    return this;
  }

  private void initSLiteral() {
    if (sLiteral == null) {
      sLiteral = RdfLiteral.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral s_literal = 3;</code>
   * @return whether the sLiteral field is set
   */
  public boolean hasSLiteral() {
    return (bitField0_ & 0x00004000) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral s_literal = 3;</code>
   * @return this
   */
  public RdfQuad clearSLiteral() {
    bitField0_ &= ~0x00004000;
    if (sLiteral != null) {
      sLiteral.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral s_literal = 3;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableSLiteral()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfLiteral getSLiteral() {
    initSLiteral();
    return sLiteral;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral s_literal = 3;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfLiteral getMutableSLiteral() {
    clearSubjectOtherSLiteral();
    initSLiteral();
    bitField0_ |= 0x00004000;
    return sLiteral;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral s_literal = 3;</code>
   * @param value the sLiteral to set
   * @return this
   */
  public RdfQuad setSLiteral(final RdfLiteral value) {
    clearSubjectOtherSLiteral();
    initSLiteral();
    bitField0_ |= 0x00004000;
    sLiteral.copyFrom(value);
    return this;
  }

  private void initSTripleTerm() {
    if (sTripleTerm == null) {
      sTripleTerm = RdfTriple.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple s_triple_term = 4;</code>
   * @return whether the sTripleTerm field is set
   */
  public boolean hasSTripleTerm() {
    return (bitField0_ & 0x00008000) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple s_triple_term = 4;</code>
   * @return this
   */
  public RdfQuad clearSTripleTerm() {
    bitField0_ &= ~0x00008000;
    if (sTripleTerm != null) {
      sTripleTerm.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple s_triple_term = 4;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableSTripleTerm()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfTriple getSTripleTerm() {
    initSTripleTerm();
    return sTripleTerm;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple s_triple_term = 4;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfTriple getMutableSTripleTerm() {
    clearSubjectOtherSTripleTerm();
    initSTripleTerm();
    bitField0_ |= 0x00008000;
    return sTripleTerm;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple s_triple_term = 4;</code>
   * @param value the sTripleTerm to set
   * @return this
   */
  public RdfQuad setSTripleTerm(final RdfTriple value) {
    clearSubjectOtherSTripleTerm();
    initSTripleTerm();
    bitField0_ |= 0x00008000;
    sTripleTerm.copyFrom(value);
    return this;
  }

  private void initPIri() {
    if (pIri == null) {
      pIri = RdfIri.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri p_iri = 5;</code>
   * @return whether the pIri field is set
   */
  public boolean hasPIri() {
    return (bitField0_ & 0x00000100) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri p_iri = 5;</code>
   * @return this
   */
  public RdfQuad clearPIri() {
    bitField0_ &= ~0x00000100;
    if (pIri != null) {
      pIri.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri p_iri = 5;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutablePIri()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfIri getPIri() {
    initPIri();
    return pIri;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri p_iri = 5;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfIri getMutablePIri() {
    clearPredicateOtherPIri();
    initPIri();
    bitField0_ |= 0x00000100;
    return pIri;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri p_iri = 5;</code>
   * @param value the pIri to set
   * @return this
   */
  public RdfQuad setPIri(final RdfIri value) {
    clearPredicateOtherPIri();
    initPIri();
    bitField0_ |= 0x00000100;
    pIri.copyFrom(value);
    return this;
  }

  private void initPBnode() {
    if (pBnode == null) {
      pBnode = "";
    }
  }

  /**
   * <code>optional string p_bnode = 6;</code>
   * @return this
   */
  public RdfQuad clearPBnode() {
    if (pBnode != null) {
      pBnode = "";
    }
    return this;
  }

  /**
   * <code>optional string p_bnode = 6;</code>
   * @return the pBnode
   */
  public String getPBnode() {
    initPBnode();
    return pBnode;
  }

  /**
   * <code>optional string p_bnode = 6;</code>
   * @param value the pBnode to set
   * @return this
   */
  public RdfQuad setPBnode(final String value) {
    clearPredicateOtherPBnode();
    pBnode = value;
    return this;
  }

  private void initPLiteral() {
    if (pLiteral == null) {
      pLiteral = RdfLiteral.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral p_literal = 7;</code>
   * @return whether the pLiteral field is set
   */
  public boolean hasPLiteral() {
    return (bitField0_ & 0x00000400) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral p_literal = 7;</code>
   * @return this
   */
  public RdfQuad clearPLiteral() {
    bitField0_ &= ~0x00000400;
    if (pLiteral != null) {
      pLiteral.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral p_literal = 7;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutablePLiteral()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfLiteral getPLiteral() {
    initPLiteral();
    return pLiteral;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral p_literal = 7;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfLiteral getMutablePLiteral() {
    clearPredicateOtherPLiteral();
    initPLiteral();
    bitField0_ |= 0x00000400;
    return pLiteral;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral p_literal = 7;</code>
   * @param value the pLiteral to set
   * @return this
   */
  public RdfQuad setPLiteral(final RdfLiteral value) {
    clearPredicateOtherPLiteral();
    initPLiteral();
    bitField0_ |= 0x00000400;
    pLiteral.copyFrom(value);
    return this;
  }

  private void initPTripleTerm() {
    if (pTripleTerm == null) {
      pTripleTerm = RdfTriple.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple p_triple_term = 8;</code>
   * @return whether the pTripleTerm field is set
   */
  public boolean hasPTripleTerm() {
    return (bitField0_ & 0x00000800) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple p_triple_term = 8;</code>
   * @return this
   */
  public RdfQuad clearPTripleTerm() {
    bitField0_ &= ~0x00000800;
    if (pTripleTerm != null) {
      pTripleTerm.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple p_triple_term = 8;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutablePTripleTerm()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfTriple getPTripleTerm() {
    initPTripleTerm();
    return pTripleTerm;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple p_triple_term = 8;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfTriple getMutablePTripleTerm() {
    clearPredicateOtherPTripleTerm();
    initPTripleTerm();
    bitField0_ |= 0x00000800;
    return pTripleTerm;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple p_triple_term = 8;</code>
   * @param value the pTripleTerm to set
   * @return this
   */
  public RdfQuad setPTripleTerm(final RdfTriple value) {
    clearPredicateOtherPTripleTerm();
    initPTripleTerm();
    bitField0_ |= 0x00000800;
    pTripleTerm.copyFrom(value);
    return this;
  }

  private void initOIri() {
    if (oIri == null) {
      oIri = RdfIri.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri o_iri = 9;</code>
   * @return whether the oIri field is set
   */
  public boolean hasOIri() {
    return (bitField0_ & 0x00000010) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri o_iri = 9;</code>
   * @return this
   */
  public RdfQuad clearOIri() {
    bitField0_ &= ~0x00000010;
    if (oIri != null) {
      oIri.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri o_iri = 9;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableOIri()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfIri getOIri() {
    initOIri();
    return oIri;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri o_iri = 9;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfIri getMutableOIri() {
    clearObjectOtherOIri();
    initOIri();
    bitField0_ |= 0x00000010;
    return oIri;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri o_iri = 9;</code>
   * @param value the oIri to set
   * @return this
   */
  public RdfQuad setOIri(final RdfIri value) {
    clearObjectOtherOIri();
    initOIri();
    bitField0_ |= 0x00000010;
    oIri.copyFrom(value);
    return this;
  }

  private void initOBnode() {
    if (oBnode == null) {
      oBnode = "";
    }
  }

  /**
   * <code>optional string o_bnode = 10;</code>
   * @return this
   */
  public RdfQuad clearOBnode() {
    if (oBnode != null) {
      oBnode = "";
    }
    return this;
  }

  /**
   * <code>optional string o_bnode = 10;</code>
   * @return the oBnode
   */
  public String getOBnode() {
    initOBnode();
    return oBnode;
  }

  /**
   * <code>optional string o_bnode = 10;</code>
   * @param value the oBnode to set
   * @return this
   */
  public RdfQuad setOBnode(final String value) {
    clearObjectOtherOBnode();
    oBnode = value;
    return this;
  }

  private void initOLiteral() {
    if (oLiteral == null) {
      oLiteral = RdfLiteral.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral o_literal = 11;</code>
   * @return whether the oLiteral field is set
   */
  public boolean hasOLiteral() {
    return (bitField0_ & 0x00000040) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral o_literal = 11;</code>
   * @return this
   */
  public RdfQuad clearOLiteral() {
    bitField0_ &= ~0x00000040;
    if (oLiteral != null) {
      oLiteral.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral o_literal = 11;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableOLiteral()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfLiteral getOLiteral() {
    initOLiteral();
    return oLiteral;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral o_literal = 11;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfLiteral getMutableOLiteral() {
    clearObjectOtherOLiteral();
    initOLiteral();
    bitField0_ |= 0x00000040;
    return oLiteral;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral o_literal = 11;</code>
   * @param value the oLiteral to set
   * @return this
   */
  public RdfQuad setOLiteral(final RdfLiteral value) {
    clearObjectOtherOLiteral();
    initOLiteral();
    bitField0_ |= 0x00000040;
    oLiteral.copyFrom(value);
    return this;
  }

  private void initOTripleTerm() {
    if (oTripleTerm == null) {
      oTripleTerm = RdfTriple.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple o_triple_term = 12;</code>
   * @return whether the oTripleTerm field is set
   */
  public boolean hasOTripleTerm() {
    return (bitField0_ & 0x00000080) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple o_triple_term = 12;</code>
   * @return this
   */
  public RdfQuad clearOTripleTerm() {
    bitField0_ &= ~0x00000080;
    if (oTripleTerm != null) {
      oTripleTerm.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple o_triple_term = 12;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableOTripleTerm()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfTriple getOTripleTerm() {
    initOTripleTerm();
    return oTripleTerm;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple o_triple_term = 12;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfTriple getMutableOTripleTerm() {
    clearObjectOtherOTripleTerm();
    initOTripleTerm();
    bitField0_ |= 0x00000080;
    return oTripleTerm;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfTriple o_triple_term = 12;</code>
   * @param value the oTripleTerm to set
   * @return this
   */
  public RdfQuad setOTripleTerm(final RdfTriple value) {
    clearObjectOtherOTripleTerm();
    initOTripleTerm();
    bitField0_ |= 0x00000080;
    oTripleTerm.copyFrom(value);
    return this;
  }

  private void initGIri() {
    if (gIri == null) {
      gIri = RdfIri.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri g_iri = 13;</code>
   * @return whether the gIri field is set
   */
  public boolean hasGIri() {
    return (bitField0_ & 0x00000001) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri g_iri = 13;</code>
   * @return this
   */
  public RdfQuad clearGIri() {
    bitField0_ &= ~0x00000001;
    if (gIri != null) {
      gIri.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri g_iri = 13;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableGIri()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfIri getGIri() {
    initGIri();
    return gIri;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri g_iri = 13;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfIri getMutableGIri() {
    clearGraphOtherGIri();
    initGIri();
    bitField0_ |= 0x00000001;
    return gIri;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfIri g_iri = 13;</code>
   * @param value the gIri to set
   * @return this
   */
  public RdfQuad setGIri(final RdfIri value) {
    clearGraphOtherGIri();
    initGIri();
    bitField0_ |= 0x00000001;
    gIri.copyFrom(value);
    return this;
  }

  private void initGBnode() {
    if (gBnode == null) {
      gBnode = "";
    }
  }

  /**
   * <code>optional string g_bnode = 14;</code>
   * @return this
   */
  public RdfQuad clearGBnode() {
    if (gBnode != null) {
      gBnode = "";
    }
    return this;
  }

  /**
   * <code>optional string g_bnode = 14;</code>
   * @return the gBnode
   */
  public String getGBnode() {
    initGBnode();
    return gBnode;
  }

  /**
   * <code>optional string g_bnode = 14;</code>
   * @param value the gBnode to set
   * @return this
   */
  public RdfQuad setGBnode(final String value) {
    clearGraphOtherGBnode();
    gBnode = value;
    return this;
  }

  private void initGDefaultGraph() {
    if (gDefaultGraph == null) {
      gDefaultGraph = RdfDefaultGraph.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfDefaultGraph g_default_graph = 15;</code>
   * @return whether the gDefaultGraph field is set
   */
  public boolean hasGDefaultGraph() {
    return (bitField0_ & 0x00000004) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfDefaultGraph g_default_graph = 15;</code>
   * @return this
   */
  public RdfQuad clearGDefaultGraph() {
    bitField0_ &= ~0x00000004;
    if (gDefaultGraph != null) {
      gDefaultGraph.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfDefaultGraph g_default_graph = 15;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableGDefaultGraph()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfDefaultGraph getGDefaultGraph() {
    initGDefaultGraph();
    return gDefaultGraph;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfDefaultGraph g_default_graph = 15;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfDefaultGraph getMutableGDefaultGraph() {
    clearGraphOtherGDefaultGraph();
    initGDefaultGraph();
    bitField0_ |= 0x00000004;
    return gDefaultGraph;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfDefaultGraph g_default_graph = 15;</code>
   * @param value the gDefaultGraph to set
   * @return this
   */
  public RdfQuad setGDefaultGraph(final RdfDefaultGraph value) {
    clearGraphOtherGDefaultGraph();
    initGDefaultGraph();
    bitField0_ |= 0x00000004;
    gDefaultGraph.copyFrom(value);
    return this;
  }

  private void initGLiteral() {
    if (gLiteral == null) {
      gLiteral = RdfLiteral.newInstance();
    }
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral g_literal = 16;</code>
   * @return whether the gLiteral field is set
   */
  public boolean hasGLiteral() {
    return (bitField0_ & 0x00000008) != 0;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral g_literal = 16;</code>
   * @return this
   */
  public RdfQuad clearGLiteral() {
    bitField0_ &= ~0x00000008;
    if (gLiteral != null) {
      gLiteral.clear();
    }
    return this;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral g_literal = 16;</code>
   *
   * This method returns the internal storage object without modifying any has state.
   * The returned object should not be modified and be treated as read-only.
   *
   * Use {@link #getMutableGLiteral()} if you want to modify it.
   *
   * @return internal storage object for reading
   */
  public RdfLiteral getGLiteral() {
    initGLiteral();
    return gLiteral;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral g_literal = 16;</code>
   *
   * This method returns the internal storage object and sets the corresponding
   * has state. The returned object will become part of this message and its
   * contents may be modified as long as the has state is not cleared.
   *
   * @return internal storage object for modifications
   */
  public RdfLiteral getMutableGLiteral() {
    clearGraphOtherGLiteral();
    initGLiteral();
    bitField0_ |= 0x00000008;
    return gLiteral;
  }

  /**
   * <code>optional .eu.ostrzyciel.jelly.core.proto.v1.RdfLiteral g_literal = 16;</code>
   * @param value the gLiteral to set
   * @return this
   */
  public RdfQuad setGLiteral(final RdfLiteral value) {
    clearGraphOtherGLiteral();
    initGLiteral();
    bitField0_ |= 0x00000008;
    gLiteral.copyFrom(value);
    return this;
  }

  @Override
  public RdfQuad copyFrom(final RdfQuad other) {
    cachedSize = other.cachedSize;
    if ((bitField0_ | other.bitField0_) != 0) {
      bitField0_ = other.bitField0_;
      if (other.hasSIri()) {
        initSIri();
        sIri.copyFrom(other.sIri);
      } else {
        clearSIri();
      }
      sBnode = other.sBnode;
      if (other.hasSLiteral()) {
        initSLiteral();
        sLiteral.copyFrom(other.sLiteral);
      } else {
        clearSLiteral();
      }
      if (other.hasSTripleTerm()) {
        initSTripleTerm();
        sTripleTerm.copyFrom(other.sTripleTerm);
      } else {
        clearSTripleTerm();
      }
      if (other.hasPIri()) {
        initPIri();
        pIri.copyFrom(other.pIri);
      } else {
        clearPIri();
      }
      pBnode = other.pBnode;
      if (other.hasPLiteral()) {
        initPLiteral();
        pLiteral.copyFrom(other.pLiteral);
      } else {
        clearPLiteral();
      }
      if (other.hasPTripleTerm()) {
        initPTripleTerm();
        pTripleTerm.copyFrom(other.pTripleTerm);
      } else {
        clearPTripleTerm();
      }
      if (other.hasOIri()) {
        initOIri();
        oIri.copyFrom(other.oIri);
      } else {
        clearOIri();
      }
      oBnode = other.oBnode;
      if (other.hasOLiteral()) {
        initOLiteral();
        oLiteral.copyFrom(other.oLiteral);
      } else {
        clearOLiteral();
      }
      if (other.hasOTripleTerm()) {
        initOTripleTerm();
        oTripleTerm.copyFrom(other.oTripleTerm);
      } else {
        clearOTripleTerm();
      }
      if (other.hasGIri()) {
        initGIri();
        gIri.copyFrom(other.gIri);
      } else {
        clearGIri();
      }
      gBnode = other.gBnode;
      if (other.hasGDefaultGraph()) {
        initGDefaultGraph();
        gDefaultGraph.copyFrom(other.gDefaultGraph);
      } else {
        clearGDefaultGraph();
      }
      if (other.hasGLiteral()) {
        initGLiteral();
        gLiteral.copyFrom(other.gLiteral);
      } else {
        clearGLiteral();
      }
    }
    return this;
  }

  @Override
  public RdfQuad mergeFrom(final RdfQuad other) {
    if (other.isEmpty()) {
      return this;
    }
    cachedSize = -1;
    if (other.hasSIri()) {
      getMutableSIri().mergeFrom(other.sIri);
    }
    sBnode = other.sBnode;
    if (other.hasSLiteral()) {
      getMutableSLiteral().mergeFrom(other.sLiteral);
    }
    if (other.hasSTripleTerm()) {
      getMutableSTripleTerm().mergeFrom(other.sTripleTerm);
    }
    if (other.hasPIri()) {
      getMutablePIri().mergeFrom(other.pIri);
    }
    pBnode = other.pBnode;
    if (other.hasPLiteral()) {
      getMutablePLiteral().mergeFrom(other.pLiteral);
    }
    if (other.hasPTripleTerm()) {
      getMutablePTripleTerm().mergeFrom(other.pTripleTerm);
    }
    if (other.hasOIri()) {
      getMutableOIri().mergeFrom(other.oIri);
    }
    oBnode = other.oBnode;
    if (other.hasOLiteral()) {
      getMutableOLiteral().mergeFrom(other.oLiteral);
    }
    if (other.hasOTripleTerm()) {
      getMutableOTripleTerm().mergeFrom(other.oTripleTerm);
    }
    if (other.hasGIri()) {
      getMutableGIri().mergeFrom(other.gIri);
    }
    gBnode = other.gBnode;
    if (other.hasGDefaultGraph()) {
      getMutableGDefaultGraph().mergeFrom(other.gDefaultGraph);
    }
    if (other.hasGLiteral()) {
      getMutableGLiteral().mergeFrom(other.gLiteral);
    }
    return this;
  }

  @Override
  public RdfQuad clear() {
    if (isEmpty()) {
      return this;
    }
    cachedSize = -1;
    bitField0_ = 0;
    if (sIri != null) {
      sIri.clear();
    }
    if (sBnode != null) {
      sBnode = "";
    }
    if (sLiteral != null) {
      sLiteral.clear();
    }
    if (sTripleTerm != null) {
      sTripleTerm.clear();
    }
    if (pIri != null) {
      pIri.clear();
    }
    if (pBnode != null) {
      pBnode = "";
    }
    if (pLiteral != null) {
      pLiteral.clear();
    }
    if (pTripleTerm != null) {
      pTripleTerm.clear();
    }
    if (oIri != null) {
      oIri.clear();
    }
    if (oBnode != null) {
      oBnode = "";
    }
    if (oLiteral != null) {
      oLiteral.clear();
    }
    if (oTripleTerm != null) {
      oTripleTerm.clear();
    }
    if (gIri != null) {
      gIri.clear();
    }
    if (gBnode != null) {
      gBnode = "";
    }
    if (gDefaultGraph != null) {
      gDefaultGraph.clear();
    }
    if (gLiteral != null) {
      gLiteral.clear();
    }
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfQuad)) {
      return false;
    }
    RdfQuad other = (RdfQuad) o;
    return bitField0_ == other.bitField0_
      && (!hasSIri() || sIri.equals(other.sIri))
      && sBnode.equals(other.sBnode)
      && (!hasSLiteral() || sLiteral.equals(other.sLiteral))
      && (!hasSTripleTerm() || sTripleTerm.equals(other.sTripleTerm))
      && (!hasPIri() || pIri.equals(other.pIri))
      && pBnode.equals(other.pBnode)
      && (!hasPLiteral() || pLiteral.equals(other.pLiteral))
      && (!hasPTripleTerm() || pTripleTerm.equals(other.pTripleTerm))
      && (!hasOIri() || oIri.equals(other.oIri))
      && oBnode.equals(other.oBnode)
      && (!hasOLiteral() || oLiteral.equals(other.oLiteral))
      && (!hasOTripleTerm() || oTripleTerm.equals(other.oTripleTerm))
      && (!hasGIri() || gIri.equals(other.gIri))
      && gBnode.equals(other.gBnode)
      && (!hasGDefaultGraph() || gDefaultGraph.equals(other.gDefaultGraph))
      && (!hasGLiteral() || gLiteral.equals(other.gLiteral));
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
    if ((bitField0_ & 0x00001000) != 0) {
      output.writeRawByte((byte) 10);
      output.writeUInt32NoTag(sIri.getCachedSize());
      sIri.writeTo(output);
    }
    if ((bitField0_ & 0x00002000) != 0) {
      output.writeRawByte((byte) 18);
      output.writeStringNoTag(sBnode);
    }
    if ((bitField0_ & 0x00004000) != 0) {
      output.writeRawByte((byte) 26);
      output.writeUInt32NoTag(sLiteral.getCachedSize());
      sLiteral.writeTo(output);
    }
    if ((bitField0_ & 0x00008000) != 0) {
      output.writeRawByte((byte) 34);
      output.writeUInt32NoTag(sTripleTerm.getCachedSize());
      sTripleTerm.writeTo(output);
    }
    if ((bitField0_ & 0x00000100) != 0) {
      output.writeRawByte((byte) 42);
      output.writeUInt32NoTag(pIri.getCachedSize());
      pIri.writeTo(output);
    }
    if ((bitField0_ & 0x00000200) != 0) {
      output.writeRawByte((byte) 50);
      output.writeStringNoTag(pBnode);
    }
    if ((bitField0_ & 0x00000400) != 0) {
      output.writeRawByte((byte) 58);
      output.writeUInt32NoTag(pLiteral.getCachedSize());
      pLiteral.writeTo(output);
    }
    if ((bitField0_ & 0x00000800) != 0) {
      output.writeRawByte((byte) 66);
      output.writeUInt32NoTag(pTripleTerm.getCachedSize());
      pTripleTerm.writeTo(output);
    }
    if ((bitField0_ & 0x00000010) != 0) {
      output.writeRawByte((byte) 74);
      output.writeUInt32NoTag(oIri.getCachedSize());
      oIri.writeTo(output);
    }
    if ((bitField0_ & 0x00000020) != 0) {
      output.writeRawByte((byte) 82);
      output.writeStringNoTag(oBnode);
    }
    if ((bitField0_ & 0x00000040) != 0) {
      output.writeRawByte((byte) 90);
      output.writeUInt32NoTag(oLiteral.getCachedSize());
      oLiteral.writeTo(output);
    }
    if ((bitField0_ & 0x00000080) != 0) {
      output.writeRawByte((byte) 98);
      output.writeUInt32NoTag(oTripleTerm.getCachedSize());
      oTripleTerm.writeTo(output);
    }
    if ((bitField0_ & 0x00000001) != 0) {
      output.writeRawByte((byte) 106);
      output.writeUInt32NoTag(gIri.getCachedSize());
      gIri.writeTo(output);
    }
    if ((bitField0_ & 0x00000002) != 0) {
      output.writeRawByte((byte) 114);
      output.writeStringNoTag(gBnode);
    }
    if ((bitField0_ & 0x00000004) != 0) {
      output.writeRawByte((byte) 122);
      output.writeUInt32NoTag(gDefaultGraph.getCachedSize());
      gDefaultGraph.writeTo(output);
    }
    if ((bitField0_ & 0x00000008) != 0) {
      output.writeRawByte((byte) 130);
      output.writeRawByte((byte) 1);
      output.writeUInt32NoTag(gLiteral.getCachedSize());
      gLiteral.writeTo(output);
    }
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    if ((bitField0_ & 0x00001000) != 0) {
      final int dataSize = sIri.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00002000) != 0) {
      size += 1 + CodedOutputStream.computeStringSizeNoTag(sBnode);
    }
    if ((bitField0_ & 0x00004000) != 0) {
      final int dataSize = sLiteral.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00008000) != 0) {
      final int dataSize = sTripleTerm.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000100) != 0) {
      final int dataSize = pIri.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000200) != 0) {
      size += 1 + CodedOutputStream.computeStringSizeNoTag(pBnode);
    }
    if ((bitField0_ & 0x00000400) != 0) {
      final int dataSize = pLiteral.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000800) != 0) {
      final int dataSize = pTripleTerm.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000010) != 0) {
      final int dataSize = oIri.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000020) != 0) {
      size += 1 + CodedOutputStream.computeStringSizeNoTag(oBnode);
    }
    if ((bitField0_ & 0x00000040) != 0) {
      final int dataSize = oLiteral.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000080) != 0) {
      final int dataSize = oTripleTerm.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000001) != 0) {
      final int dataSize = gIri.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000002) != 0) {
      size += 1 + CodedOutputStream.computeStringSizeNoTag(gBnode);
    }
    if ((bitField0_ & 0x00000004) != 0) {
      final int dataSize = gDefaultGraph.getSerializedSize();
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    if ((bitField0_ & 0x00000008) != 0) {
      final int dataSize = gLiteral.getSerializedSize();
      size += 2 + CodedOutputStream.computeUInt32SizeNoTag(dataSize) + dataSize;
    }
    return size;
  }

  @Override
  @SuppressWarnings("fallthrough")
  public RdfQuad mergeFrom(final CodedInputStream input) throws IOException {
    // Enabled Fall-Through Optimization (Quickbuf)
    int tag = input.readTag();
    while (true) {
      switch (tag) {
        case 10: {
          // sIri
          clearSubjectOtherSIri();
          initSIri();
          ProtoMessage.mergeDelimitedFrom(sIri, input);
          bitField0_ |= 0x00001000;
          tag = input.readTag();
          if (tag != 18) {
            break;
          }
        }
        case 18: {
          // sBnode
          clearSubjectOtherSBnode();
          initSBnode();
          sBnode = input.readStringRequireUtf8();
          bitField0_ |= 0x00002000;
          tag = input.readTag();
          if (tag != 26) {
            break;
          }
        }
        case 26: {
          // sLiteral
          clearSubjectOtherSLiteral();
          initSLiteral();
          ProtoMessage.mergeDelimitedFrom(sLiteral, input);
          bitField0_ |= 0x00004000;
          tag = input.readTag();
          if (tag != 34) {
            break;
          }
        }
        case 34: {
          // sTripleTerm
          clearSubjectOtherSTripleTerm();
          initSTripleTerm();
          ProtoMessage.mergeDelimitedFrom(sTripleTerm, input);
          bitField0_ |= 0x00008000;
          tag = input.readTag();
          if (tag != 42) {
            break;
          }
        }
        case 42: {
          // pIri
          clearPredicateOtherPIri();
          initPIri();
          ProtoMessage.mergeDelimitedFrom(pIri, input);
          bitField0_ |= 0x00000100;
          tag = input.readTag();
          if (tag != 50) {
            break;
          }
        }
        case 50: {
          // pBnode
          clearPredicateOtherPBnode();
          initPBnode();
          pBnode = input.readStringRequireUtf8();
          bitField0_ |= 0x00000200;
          tag = input.readTag();
          if (tag != 58) {
            break;
          }
        }
        case 58: {
          // pLiteral
          clearPredicateOtherPLiteral();
          initPLiteral();
          ProtoMessage.mergeDelimitedFrom(pLiteral, input);
          bitField0_ |= 0x00000400;
          tag = input.readTag();
          if (tag != 66) {
            break;
          }
        }
        case 66: {
          // pTripleTerm
          clearPredicateOtherPTripleTerm();
          initPTripleTerm();
          ProtoMessage.mergeDelimitedFrom(pTripleTerm, input);
          bitField0_ |= 0x00000800;
          tag = input.readTag();
          if (tag != 74) {
            break;
          }
        }
        case 74: {
          // oIri
          clearObjectOtherOIri();
          initOIri();
          ProtoMessage.mergeDelimitedFrom(oIri, input);
          bitField0_ |= 0x00000010;
          tag = input.readTag();
          if (tag != 82) {
            break;
          }
        }
        case 82: {
          // oBnode
          clearObjectOtherOBnode();
          initOBnode();
          oBnode = input.readStringRequireUtf8();
          bitField0_ |= 0x00000020;
          tag = input.readTag();
          if (tag != 90) {
            break;
          }
        }
        case 90: {
          // oLiteral
          clearObjectOtherOLiteral();
          initOLiteral();
          ProtoMessage.mergeDelimitedFrom(oLiteral, input);
          bitField0_ |= 0x00000040;
          tag = input.readTag();
          if (tag != 98) {
            break;
          }
        }
        case 98: {
          // oTripleTerm
          clearObjectOtherOTripleTerm();
          initOTripleTerm();
          ProtoMessage.mergeDelimitedFrom(oTripleTerm, input);
          bitField0_ |= 0x00000080;
          tag = input.readTag();
          if (tag != 106) {
            break;
          }
        }
        case 106: {
          // gIri
          clearGraphOtherGIri();
          initGIri();
          ProtoMessage.mergeDelimitedFrom(gIri, input);
          bitField0_ |= 0x00000001;
          tag = input.readTag();
          if (tag != 114) {
            break;
          }
        }
        case 114: {
          // gBnode
          clearGraphOtherGBnode();
          initGBnode();
          gBnode = input.readStringRequireUtf8();
          bitField0_ |= 0x00000002;
          tag = input.readTag();
          if (tag != 122) {
            break;
          }
        }
        case 122: {
          // gDefaultGraph
          clearGraphOtherGDefaultGraph();
          initGDefaultGraph();
          ProtoMessage.mergeDelimitedFrom(gDefaultGraph, input);
          bitField0_ |= 0x00000004;
          tag = input.readTag();
          if (tag != 130) {
            break;
          }
        }
        case 130: {
          // gLiteral
          clearGraphOtherGLiteral();
          initGLiteral();
          ProtoMessage.mergeDelimitedFrom(gLiteral, input);
          bitField0_ |= 0x00000008;
          tag = input.readTag();
          if (tag != 0) {
            break;
          }
        }
        case 0: {
          return this;
        }
        default: {
          if (!input.skipField(tag)) {
            return this;
          }
          tag = input.readTag();
          break;
        }
      }
    }
  }

  @Override
  public RdfQuad clone() {
    return new RdfQuad().copyFrom(this);
  }

  @Override
  public boolean isEmpty() {
    return ((bitField0_) == 0);
  }

  public static RdfQuad parseFrom(final byte[] data) throws InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(new RdfQuad(), data).checkInitialized();
  }

  public static RdfQuad parseFrom(final CodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(new RdfQuad(), input).checkInitialized();
  }

  /**
   * @return factory for creating RdfQuad messages
   */
  public static MessageFactory<RdfQuad> getFactory() {
    return RdfQuadFactory.INSTANCE;
  }

  private enum RdfQuadFactory implements MessageFactory<RdfQuad> {
    INSTANCE;

    @Override
    public RdfQuad create() {
      return RdfQuad.newInstance();
    }
  }
}
