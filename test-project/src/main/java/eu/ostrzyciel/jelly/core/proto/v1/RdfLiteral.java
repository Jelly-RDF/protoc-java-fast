// Code generated by protocol buffer compiler. Do not edit!
package eu.ostrzyciel.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;
import java.io.IOException;

/**
 * Protobuf type {@code RdfLiteral}
 */
@SuppressWarnings("hiding")
public final class RdfLiteral extends ProtoMessage<RdfLiteral> implements Cloneable {
  private static final long serialVersionUID = 0L;

  /**
   * <code>optional string lex = 1;</code>
   */
  private String lex = null;

  /**
   * <code>optional string langtag = 2;</code>
   */
  private String langtag = null;

  /**
   * <code>optional uint32 datatype = 3;</code>
   */
  private int datatype;

  private RdfLiteral() {
  }

  /**
   * @return a new empty instance of {@code RdfLiteral}
   */
  public static RdfLiteral newInstance() {
    return new RdfLiteral();
  }

  public boolean hasLiteralKind() {
    return (((bitField0_ & 0x00000003)) != 0);
  }

  public RdfLiteral clearLiteralKind() {
    if (hasLiteralKind()) {
      clearLangtag();
      clearDatatype();
    }
    return this;
  }

  private void clearLiteralKindOtherLangtag() {
    if ((((bitField0_ & 0x00000002)) != 0)) {
      clearDatatype();
    }
  }

  private void clearLiteralKindOtherDatatype() {
    if ((((bitField0_ & 0x00000001)) != 0)) {
      clearLangtag();
    }
  }

  private void initLex() {
    if (lex == null) {
      lex = "";
    }
  }

  /**
   * <code>optional string lex = 1;</code>
   * @return whether the lex field is set
   */
  public boolean hasLex() {
    return (bitField0_ & 0x00000004) != 0;
  }

  /**
   * <code>optional string lex = 1;</code>
   * @return this
   */
  public RdfLiteral clearLex() {
    bitField0_ &= ~0x00000004;
    if (lex != null) {
      lex = "";
    }
    return this;
  }

  /**
   * <code>optional string lex = 1;</code>
   * @return the lex
   */
  public String getLex() {
    initLex();
    return lex;
  }

  /**
   * <code>optional string lex = 1;</code>
   * @param value the lex to set
   * @return this
   */
  public RdfLiteral setLex(final String value) {
    initLex();
    bitField0_ |= 0x00000004;
    lex = value;
    return this;
  }

  private void initLangtag() {
    if (langtag == null) {
      langtag = "";
    }
  }

  /**
   * <code>optional string langtag = 2;</code>
   * @return whether the langtag field is set
   */
  public boolean hasLangtag() {
    return (bitField0_ & 0x00000001) != 0;
  }

  /**
   * <code>optional string langtag = 2;</code>
   * @return this
   */
  public RdfLiteral clearLangtag() {
    bitField0_ &= ~0x00000001;
    if (langtag != null) {
      langtag = "";
    }
    return this;
  }

  /**
   * <code>optional string langtag = 2;</code>
   * @return the langtag
   */
  public String getLangtag() {
    initLangtag();
    return langtag;
  }

  /**
   * <code>optional string langtag = 2;</code>
   * @param value the langtag to set
   * @return this
   */
  public RdfLiteral setLangtag(final String value) {
    clearLiteralKindOtherLangtag();
    initLangtag();
    bitField0_ |= 0x00000001;
    langtag = value;
    return this;
  }

  /**
   * <code>optional uint32 datatype = 3;</code>
   * @return whether the datatype field is set
   */
  public boolean hasDatatype() {
    return (bitField0_ & 0x00000002) != 0;
  }

  /**
   * <code>optional uint32 datatype = 3;</code>
   * @return this
   */
  public RdfLiteral clearDatatype() {
    bitField0_ &= ~0x00000002;
    datatype = 0;
    return this;
  }

  /**
   * <code>optional uint32 datatype = 3;</code>
   * @return the datatype
   */
  public int getDatatype() {
    return datatype;
  }

  /**
   * <code>optional uint32 datatype = 3;</code>
   * @param value the datatype to set
   * @return this
   */
  public RdfLiteral setDatatype(final int value) {
    clearLiteralKindOtherDatatype();
    bitField0_ |= 0x00000002;
    datatype = value;
    return this;
  }

  @Override
  public RdfLiteral copyFrom(final RdfLiteral other) {
    cachedSize = other.cachedSize;
    if ((bitField0_ | other.bitField0_) != 0) {
      bitField0_ = other.bitField0_;
      if (other.hasLex()) {
        initLex();
        lex = other.lex;
      } else {
        clearLex();
      }
      if (other.hasLangtag()) {
        initLangtag();
        langtag = other.langtag;
      } else {
        clearLangtag();
      }
      datatype = other.datatype;
    }
    return this;
  }

  @Override
  public RdfLiteral mergeFrom(final RdfLiteral other) {
    if (other.isEmpty()) {
      return this;
    }
    cachedSize = -1;
    if (other.hasLex()) {
      lex = other.lex;
    }
    if (other.hasLangtag()) {
      langtag = other.langtag;
    }
    if (other.hasDatatype()) {
      setDatatype(other.datatype);
    }
    return this;
  }

  @Override
  public RdfLiteral clear() {
    if (isEmpty()) {
      return this;
    }
    cachedSize = -1;
    bitField0_ = 0;
    if (lex != null) {
      lex = "";
    }
    if (langtag != null) {
      langtag = "";
    }
    datatype = 0;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfLiteral)) {
      return false;
    }
    RdfLiteral other = (RdfLiteral) o;
    return bitField0_ == other.bitField0_
      && (!hasLex() || lex.equals(other.lex))
      && (!hasLangtag() || langtag.equals(other.langtag))
      && (!hasDatatype() || datatype == other.datatype);
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
    if ((bitField0_ & 0x00000004) != 0) {
      output.writeRawByte((byte) 10);
      output.writeStringNoTag(lex);
    }
    if ((bitField0_ & 0x00000001) != 0) {
      output.writeRawByte((byte) 18);
      output.writeStringNoTag(langtag);
    }
    if ((bitField0_ & 0x00000002) != 0) {
      output.writeRawByte((byte) 24);
      output.writeUInt32NoTag(datatype);
    }
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    if ((bitField0_ & 0x00000004) != 0) {
      size += 1 + CodedOutputStream.computeStringSizeNoTag(lex);
    }
    if ((bitField0_ & 0x00000001) != 0) {
      size += 1 + CodedOutputStream.computeStringSizeNoTag(langtag);
    }
    if ((bitField0_ & 0x00000002) != 0) {
      size += 1 + CodedOutputStream.computeUInt32SizeNoTag(datatype);
    }
    return size;
  }

  @Override
  @SuppressWarnings("fallthrough")
  public RdfLiteral mergeFrom(final CodedInputStream input) throws IOException {
    // Enabled Fall-Through Optimization (Quickbuf)
    int tag = input.readTag();
    while (true) {
      switch (tag) {
        case 10: {
          // lex
          initLex();
          lex = input.readStringRequireUtf8();
          bitField0_ |= 0x00000004;
          tag = input.readTag();
          if (tag != 18) {
            break;
          }
        }
        case 18: {
          // langtag
          clearLiteralKindOtherLangtag();
          initLangtag();
          langtag = input.readStringRequireUtf8();
          bitField0_ |= 0x00000001;
          tag = input.readTag();
          if (tag != 24) {
            break;
          }
        }
        case 24: {
          // datatype
          clearLiteralKindOtherDatatype();
          datatype = input.readUInt32();
          bitField0_ |= 0x00000002;
          tag = input.readTag();
          if (tag != 0) {
            break;
          }
        }
        case 0: {
          return this;
        }
        default: {
          if (!input.skipField(tag)) {
            return this;
          }
          tag = input.readTag();
          break;
        }
      }
    }
  }

  @Override
  public RdfLiteral clone() {
    return new RdfLiteral().copyFrom(this);
  }

  @Override
  public boolean isEmpty() {
    return ((bitField0_) == 0);
  }

  public static RdfLiteral parseFrom(final byte[] data) throws InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(new RdfLiteral(), data).checkInitialized();
  }

  public static RdfLiteral parseFrom(final CodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(new RdfLiteral(), input).checkInitialized();
  }

  /**
   * @return factory for creating RdfLiteral messages
   */
  public static MessageFactory<RdfLiteral> getFactory() {
    return RdfLiteralFactory.INSTANCE;
  }

  private enum RdfLiteralFactory implements MessageFactory<RdfLiteral> {
    INSTANCE;

    @Override
    public RdfLiteral create() {
      return RdfLiteral.newInstance();
    }
  }
}
