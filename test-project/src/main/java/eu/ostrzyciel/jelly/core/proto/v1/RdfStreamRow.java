// Code generated by protocol buffer compiler. Do not edit!
package eu.ostrzyciel.jelly.core.proto.v1;

import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.InvalidProtocolBufferException;
import eu.neverblink.protoc.java.runtime.MessageFactory;
import eu.neverblink.protoc.java.runtime.ProtoMessage;
import java.io.IOException;

/**
 * Protobuf type {@code RdfStreamRow}
 */
@SuppressWarnings("hiding")
public final class RdfStreamRow extends ProtoMessage<RdfStreamRow> implements Cloneable {
  /**
   * <code>oneof row { ... }</code>
   */
  private Object row = null;

  private byte rowNumber = 0;

  private RdfStreamRow() {
  }

  /**
   * @return a new empty instance of {@code RdfStreamRow}
   */
  public static RdfStreamRow newInstance() {
    return new RdfStreamRow();
  }

  public boolean hasRow() {
    return row != null;
  }

  /**
   * Low-level setter for the <code>row</code> oneof field.
   * Use with care, as it will not check the type of the value.
   */
  public void setRow(Object row, byte number) {
    this.row = row;
    this.rowNumber = number;
  }

  /**
   * Sets the <code>row</code> oneof field to options.
   */
  public void setOptions(RdfStreamOptions options) {
    this.row = options;
    this.rowNumber = 1;
  }

  /**
   * Sets the <code>row</code> oneof field to triple.
   */
  public void setTriple(RdfTriple triple) {
    this.row = triple;
    this.rowNumber = 2;
  }

  /**
   * Sets the <code>row</code> oneof field to quad.
   */
  public void setQuad(RdfQuad quad) {
    this.row = quad;
    this.rowNumber = 3;
  }

  /**
   * Sets the <code>row</code> oneof field to graphStart.
   */
  public void setGraphStart(RdfGraphStart graphStart) {
    this.row = graphStart;
    this.rowNumber = 4;
  }

  /**
   * Sets the <code>row</code> oneof field to graphEnd.
   */
  public void setGraphEnd(RdfGraphEnd graphEnd) {
    this.row = graphEnd;
    this.rowNumber = 5;
  }

  /**
   * Sets the <code>row</code> oneof field to namespace.
   */
  public void setNamespace(RdfNamespaceDeclaration namespace) {
    this.row = namespace;
    this.rowNumber = 6;
  }

  /**
   * Sets the <code>row</code> oneof field to name.
   */
  public void setName(RdfNameEntry name) {
    this.row = name;
    this.rowNumber = 9;
  }

  /**
   * Sets the <code>row</code> oneof field to prefix.
   */
  public void setPrefix(RdfPrefixEntry prefix) {
    this.row = prefix;
    this.rowNumber = 10;
  }

  /**
   * Sets the <code>row</code> oneof field to datatype.
   */
  public void setDatatype(RdfDatatypeEntry datatype) {
    this.row = datatype;
    this.rowNumber = 11;
  }

  /**
   * Returns the <code>row</code> oneof field.
   */
  public Object getRow() {
    return row;
  }

  /**
   * Returns the set field number of the <code>row</code> oneof field.
   */
  public byte getRowFieldNumber() {
    return rowNumber;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfStreamOptions getOptions() {
    return (RdfStreamOptions) row;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfTriple getTriple() {
    return (RdfTriple) row;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfQuad getQuad() {
    return (RdfQuad) row;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfGraphStart getGraphStart() {
    return (RdfGraphStart) row;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfGraphEnd getGraphEnd() {
    return (RdfGraphEnd) row;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfNamespaceDeclaration getNamespace() {
    return (RdfNamespaceDeclaration) row;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfNameEntry getName() {
    return (RdfNameEntry) row;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfPrefixEntry getPrefix() {
    return (RdfPrefixEntry) row;
  }

  /**
   * Returns the <code>row</code> oneof field.
   * Use with care, as it will not check if the correct field numeber is actually set.
   */
  public RdfDatatypeEntry getDatatype() {
    return (RdfDatatypeEntry) row;
  }

  @Override
  public RdfStreamRow copyFrom(final RdfStreamRow other) {
    cachedSize = other.cachedSize;
    this.row = other.row;
    this.rowNumber = other.rowNumber;
    return this;
  }

  @Override
  public RdfStreamRow mergeFrom(final RdfStreamRow other) {
    cachedSize = -1;
    this.row = other.row;
    this.rowNumber = other.rowNumber;
    return this;
  }

  @Override
  public RdfStreamRow clear() {
    cachedSize = -1;
    this.row = null;
    this.rowNumber = 0;
    return this;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (!(o instanceof RdfStreamRow)) {
      return false;
    }
    RdfStreamRow other = (RdfStreamRow) o;
    return rowNumber == other.rowNumber && (rowNumber == 0 || row.equals(other.row));
  }

  @Override
  public void writeTo(final CodedOutputStream output) throws IOException {
  }

  @Override
  protected int computeSerializedSize() {
    int size = 0;
    return size;
  }

  @Override
  @SuppressWarnings("fallthrough")
  public RdfStreamRow mergeFrom(final CodedInputStream input) throws IOException {
    // Enabled Fall-Through Optimization (Quickbuf)
    int tag = input.readTag();
    while (true) {
      switch (tag) {
        case 0: {
          return this;
        }
        default: {
          if (!input.skipField(tag)) {
            return this;
          }
          tag = input.readTag();
          break;
        }
      }
    }
  }

  @Override
  public RdfStreamRow clone() {
    return new RdfStreamRow().copyFrom(this);
  }

  public static RdfStreamRow parseFrom(final byte[] data) throws InvalidProtocolBufferException {
    return ProtoMessage.mergeFrom(new RdfStreamRow(), data).checkInitialized();
  }

  public static RdfStreamRow parseFrom(final CodedInputStream input) throws IOException {
    return ProtoMessage.mergeFrom(new RdfStreamRow(), input).checkInitialized();
  }

  /**
   * @return factory for creating RdfStreamRow messages
   */
  public static MessageFactory<RdfStreamRow> getFactory() {
    return RdfStreamRowFactory.INSTANCE;
  }

  private enum RdfStreamRowFactory implements MessageFactory<RdfStreamRow> {
    INSTANCE;

    @Override
    public RdfStreamRow create() {
      return RdfStreamRow.newInstance();
    }
  }
}
